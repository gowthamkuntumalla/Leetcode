class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
          
        if not prerequisites:
            return list(range(numCourses))
        
        def dfs_cycle(k):
            # cycle detector for course 'k'
            
            if k in visited:
                return False
            
            if k in visiting: 
                # if seen again in the current dfs check
                return True
            
            visiting.add(k)
            
            for req in preq[k]:
                if dfs_cycle(req):
                    return True
                
            visiting.remove(k)
            visited.add(k)
            res.append(k)
            return False   
         
        preq = defaultdict(list)
        visiting = set()
        visited = set()
        res = []
        
        # build edges
        for a, b in prerequisites:
            preq[a].append(b)
        
        # check for each course
        for course in range(numCourses):
            if dfs_cycle(course):
                return []
        return res

        
        