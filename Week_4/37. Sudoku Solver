from collections import Counter
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        
        R,C = len(board),len(board[0])
        
        def solved(m,n):
            if n == C:
                # reset position to next row and starting column
                n = 0
                m +=1
                if m == R:
                    return True
                
            if board[m][n] !='.':
                return solved(m,n+1)
            
            # assign element from possible list
            ls = self.possible(board,m,n)
            for i in ls :
                board[m][n] = i
                if solved(m,n+1):
                    return True
            board[m][n] = '.'
            return False
        
        solved(0,0)
       
         
        
    def possible(self,board,r,c):
        """returns list of possible inputs at a location"""
        otherElems = Counter()
        for elem in board[r]:
            if elem !='.':
                otherElems[elem] = 1
        for row in board:
            if row[c] !='.':
                otherElems[row[c]] = 1
        for i in range(0,3):
            for j in range(0,3): 
                elem = board[3*(r//3)+i][3*(c//3)+j]
                if elem!='.':
                    otherElems[elem] = 1
        return [str(i) for i in range(1,10) if str(i) not in otherElems]
        