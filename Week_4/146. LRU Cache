from collections import OrderedDict

class LRUCache:

    def __init__(self, capacity: int):
        self.storage = OrderedDict()
        self.max_size = capacity

    def get(self, key: int) -> int:
        res = self.storage.get(key,-1)
        if res != -1:
            v = self.storage.pop(key)
            self.storage[key] = v
        return res

    def put(self, key: int, value: int) -> None:
        if key in self.storage:
            self.storage.pop(key)
        elif len(self.storage) == self.max_size:
            self.storage.popitem(last = False)
            
        self.storage[key] = value
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)