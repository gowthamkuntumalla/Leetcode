# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if not head:
            return None
        
        c,node = 0,head
        
        while node and c<k:
            c+=1
            node = node.next
                
        if c == k:
            new_head = self.reversePartial(head,k)
            head.next = self.reverseKGroup(node,k)
            return new_head
        return head
         

    def reversePartial(self, head, k):
        """reverse linked list and return head"""
        if k == 1:
            return head
        
        curr = head
        prev = None
        
        while(k>=1):
            dummy = curr.next
            curr.next = prev
            prev = curr
            curr = dummy
            k = k-1
        
        return prev
            
                
                
                
            